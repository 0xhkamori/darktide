"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jwt = __importStar(require("jose"));
const uuid = __importStar(require("uuid"));
const strings = __importStar(require("../strings"));
const moment_1 = __importDefault(require("moment"));
const buildHeaders_1 = __importDefault(require("../utilities/buildHeaders"));
const handleErrors_1 = __importDefault(require("../utilities/handleErrors"));
exports.default = async (apToken, keyPair) => {
    const decodedJwt = jwt.decodeJwt(apToken);
    const url = `https://lekcjaplus.vulcan.net.pl/${decodedJwt.tenant}/api/mobile/register/jwt`;
    const date = new Date();
    const dateUTC = date.toUTCString();
    const dateFormatted = (0, moment_1.default)(date).format('YYYY-MM-DD HH:mm:ss');
    const unixTimestamp = Math.floor(date.getTime() / 1000);
    if (decodedJwt.exp < unixTimestamp)
        throw new Error('JWT Expired. Automatic renewal by fetching /api/ap is not yet supported.');
    const body = {
        "AppName": "DzienniczekPlus 3.0",
        "AppVersion": "24.09.04 (G)",
        "Envelope": {
            "OS": strings.OPERATING_SYSTEM,
            "DeviceModel": strings.DEVICE_MODEL,
            "Certificate": keyPair.certificate,
            "CertificateType": "X509",
            "CertificateThumbprint": keyPair.fingerprint,
            "Tokens": [apToken],
            "selfIdentifier": uuid.v4(),
        },
        "NotificationToken": "",
        "API": parseInt(strings.VAPI),
        "RequestId": uuid.v4(),
        "Timestamp": unixTimestamp,
        "TimestampFormatted": dateFormatted,
    };
    const headers = (0, buildHeaders_1.default)(keyPair, body, date, url);
    const options = {
        method: 'POST',
        headers: headers,
        body: JSON.stringify(body),
    };
    const response = await fetch(url, options);
    // @ts-ignore
    const data = await response.json();
    (0, handleErrors_1.default)(data);
    return data;
};
