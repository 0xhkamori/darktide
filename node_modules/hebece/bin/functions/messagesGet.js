"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const strings = __importStar(require("../strings"));
const buildHeaders_1 = __importDefault(require("../utilities/buildHeaders"));
const handleErrors_1 = __importDefault(require("../utilities/handleErrors"));
exports.default = async (keyPair, restUrl, pupil, type, amount) => {
    if (!restUrl)
        throw new Error('No REST URL provided!');
    if (!keyPair)
        throw new Error('No KEYPAIR provided!');
    if (!pupil)
        throw new Error('No PUPIL provided!');
    const tenant = restUrl.replace(`${strings.BASE_URL}/`, '');
    const messageType = (type) => ['received', 'sent', 'deleted'][type];
    const url = `${strings.BASE_URL}/${tenant}/${pupil.Envelope[0].Unit.Symbol}/api/mobile/messages/${messageType(type)}/byBox?box=${pupil.Envelope[0].MessageBox.GlobalKey}&lastId=-2147483648&pupilId=${pupil.Envelope[0].Pupil.Id}&pageSize=500`;
    const date = new Date();
    const headers = (0, buildHeaders_1.default)(keyPair, null, date, url);
    const aab = await fetch(url, {
        method: 'GET',
        headers: headers,
    });
    console.log(url);
    // @ts-ignore
    let data = await aab.json();
    (0, handleErrors_1.default)(data);
    data.Envelope.sort((a, b) => b.DateSent.Timestamp - a.DateSent.Timestamp);
    data.Envelope = data.Envelope.slice(0, amount);
    return data;
};
