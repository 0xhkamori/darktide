import Keystore from './utilities/temporaryDb';
import { JwtOutput, KeyPair, Pupil } from './types';
import { Grade, Homework, Lesson, LuckyNumber, ChangedLesson, Attendance, Exam, Message, AddressBook } from './functions';
declare class Keypair {
    /**
     * Creates a new Keypair manager for authentication with VULCAN HebeCE API.
     *
     * @async
     * @returns
     */
    constructor();
    /**
     * Generates a new keypair and returns it.
     *
     * @returns
     */
    init(): Promise<{
        fingerprint: string;
        privateKey: string;
        certificate: string;
    }>;
}
declare class VulcanJwtRegister {
    keypair: KeyPair;
    apiap: string;
    tokenIndex: number;
    /**
     * Creates a manager for authentication with VULCAN HebeCE API.
     *
     * @param keypair The Keypair to authenticate
     * @param apiap The /api/ap content
     * @param tokenIndex What token should be authenticated? (Multistudent)
     * @returns {JwtOutput}
     */
    constructor(keypair: KeyPair, apiap: string, tokenIndex: number);
    /**
     * Registers your Keypair with a JWT to send requests to VULCAN HebeCE API.
     *
     * @async
     */
    init(): Promise<JwtOutput>;
}
declare class VulcanHebeCe {
    keypair: KeyPair;
    restUrl: string;
    symbolNumber: string;
    pupilId: number;
    pupilJson: Pupil;
    constituentId: number;
    /**
     * Creates the main manager for VULCAN HebeCE API functionality.
     * @param keypair The Keypair to authenticate
     * @param restUrl The REST URL that the API should use
     * @returns
     */
    constructor(keypair: any, restUrl: any);
    /**
     * Connects to the VULCAN HebeCE API.
     */
    connect(): Promise<boolean>;
    /**
     * Gets lucky number from the API.
     * @async
     * @returns {LuckyNumber}
     */
    getLuckyNumber(): Promise<LuckyNumber>;
    /**
     * Gets your homework from the API.
     * @param dateFrom The start of the date range
     * @param dateTo  The end of the date range
     * @async
     * @returns {Homework}
     */
    getHomework(dateFrom: Date, dateTo: Date): Promise<Homework>;
    /**
     * Gets your grades for the current period from the API.
     * @async
     * @returns {Grade}
     */
    getGrades(): Promise<Grade>;
    /**
     * Gets your timetable from the API.
     * @param dateFrom The start of the date range
     * @param dateTo The end of the date range
     * @async
     * @returns {Lesson}
     */
    getLessons(dateFrom: Date, dateTo: Date): Promise<Lesson>;
    /**
     * Gets your substitutions from the API.
     * @param dateFrom The start of the date range
     * @param dateTo The end of the date range
     * @async
     * @returns {ChangedLesson}
     */
    getChangedLessons(dateFrom: Date, dateTo: Date): Promise<ChangedLesson>;
    /**
     * Gets your attendance from the API.
     * @param dateFrom The start of the date range
     * @param dateTo The end of the date range
     * @returns {Attendance}
     */
    getAttendance(dateFrom: Date, dateTo: Date): Promise<Attendance>;
    /**
     * Gets your exams from the API.
     * @param dateFrom The start of the date range
     * @param dateTo The end of the date range
     * @returns {Exam}
     */
    getExams(dateFrom: Date, dateTo: Date): Promise<Exam>;
    messages: {
        /**
         * Gets your messages from the API.
         *
         * Messages are automatically sorted from newest to oldest.
         * @param type The type of the message (0 = received, 1 = sent, 2 = deleted)
         * @param amount How many messages do you want to fetch
         * @returns {Message}
         */
        get: (type: Exclude<number, 0 | 1 | 2>, amount: number) => Promise<Message>;
        /**
         * Gets the address book from the API.
         *
         * Useful to send a message. Contains MessageBoxes IDs that you can send a message to.
         * @returns {AddressBook}
         */
        getAddressBook: () => Promise<AddressBook>;
    };
}
export { Keypair, Keystore, VulcanJwtRegister, VulcanHebeCe };
