"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const moment_1 = __importDefault(require("moment"));
class TemporaryDb {
    path;
    all;
    set;
    get;
    remove;
    has;
    year;
    /**
     * Generates a temporary 30mins/1 year JSON database
     *
     * Store the accessToken from /api/ap in the 1 year to renew credentials.
     *
     * @param path The path of the database
     * @param year Should the database expire in a year?
     */
    constructor(path, year) {
        this.path = path;
        this.year = year;
        const initialize = (y) => {
            const initialObj = {
                "_expires": Math.floor((0, moment_1.default)().add(30, 'minutes').toDate().getTime() / 1000)
            };
            if (y) {
                initialObj['_expires'] = Math.floor((0, moment_1.default)().add(1, 'years').toDate().getTime() / 1000);
                initialObj['_year'] = true;
            }
            fs.writeFileSync(this.path, JSON.stringify(initialObj, null, 2));
        };
        if (!fs.existsSync(this.path))
            initialize(this.year);
        // check if expired
        const _checkExpired = () => {
            const db = JSON.parse(fs.readFileSync(this.path, 'utf8'));
            ;
            if (!db["_expires"])
                throw new Error(`Database headers not found.`);
            if (db["_expires"] < Math.floor((0, moment_1.default)().toDate().getTime() / 1000)) {
                initialize(db["_year"]);
            }
        };
        _checkExpired();
        const _getAll = () => {
            const db = JSON.parse(fs.readFileSync(this.path, 'utf8'));
            return db;
        };
        const _get = (key) => {
            const db = _getAll();
            return db[key];
        };
        // available for user functions
        this.all = () => {
            const db = _getAll();
            delete db.expires;
            return db;
        };
        this.has = (key) => {
            const db = _getAll();
            return !!db[key];
        };
        this.set = (key, value) => {
            if (!key)
                throw new Error("No key provided");
            if (!value)
                throw new Error("No value provided");
            const db = _getAll();
            db[key] = value;
            fs.writeFileSync(this.path, JSON.stringify(db, null, 2));
            return true;
        };
        this.get = (key) => {
            if (!key)
                throw new Error("No key provided");
            const db = _getAll();
            return db[key];
        };
        this.remove = (key) => {
            if (!key)
                throw new Error("No key provided");
            const db = _getAll();
            if (key === "_expires")
                throw new Error("Cannot delete '_expires' key");
            if (key === "_year")
                throw new Error("Cannot delete '_year' key");
            if (!db[key])
                return false;
            delete db[key];
            fs.writeFileSync(this.path, JSON.stringify(db, null, 2));
            return true;
        };
    }
}
exports.default = TemporaryDb;
