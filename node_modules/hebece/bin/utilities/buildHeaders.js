"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const strings = __importStar(require("../strings"));
const signer = __importStar(require("../functions/signer"));
exports.default = (keypair, body_raw, date, url) => {
    if (!keypair)
        throw new Error('No KEYPAIR provided!');
    if (!date)
        throw new Error('No DATE provided!');
    if (!url)
        throw new Error('No URL provided!');
    const dateUTC = date.toUTCString();
    const headers = {
        'accept': '*/*',
        'accept-charset': 'UTF-8',
        'accept-encoding': 'gzip',
        'connection': 'Keep-Alive',
        'content-type': 'application/json',
        'host': 'lekcjaplus.vulcan.net.pl',
        'user-agent': strings.USER_AGENT,
        'vapi': strings.VAPI,
        'vdate': dateUTC,
        'vdevicemodel': strings.DEVICE_MODEL,
        'vos': strings.OPERATING_SYSTEM,
        'vversioncode': strings.VERSION_CODE,
    };
    let body = null;
    if (body_raw !== null) {
        body = JSON.stringify(body_raw);
    }
    const signature = signer.sign(keypair.fingerprint, keypair.privateKey, body, url, dateUTC);
    headers['signature'] = signature.signature;
    headers['vcanonicalurl'] = signature.canonicalUrl;
    if (signature.digest !== "SHA256=") {
        headers['digest'] = signature.digest;
    }
    return headers;
};
