"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const forge = __importStar(require("node-forge"));
const generateKeyPair = async () => {
    const addYears = (dt, n) => new Date(dt.setFullYear(dt.getFullYear() + n));
    const pki = forge.pki;
    const keys = await new Promise((resolve, reject) => {
        forge.pki.rsa.generateKeyPair({ bits: 2048, workers: 2 }, (err, keypair) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(keypair);
            }
        });
    });
    const cert = pki.createCertificate();
    cert.publicKey = keys.publicKey;
    cert.privateKey = keys.privateKey;
    cert.serialNumber = "1";
    cert.validity.notBefore = new Date();
    cert.validity.notAfter = addYears(new Date(), 20);
    const attrs = [
        {
            shortName: "CN",
            value: "APP_CERTIFICATE CA Certificate",
        },
    ];
    cert.setSubject(attrs);
    cert.setIssuer(attrs);
    cert.sign(cert.privateKey, forge.md.sha256.create());
    const fHash = forge.md.sha1.create();
    fHash.update(forge.asn1.toDer(pki.certificateToAsn1(cert)).getBytes());
    const fingerprint = fHash.digest().toHex();
    const privateKey = pki.privateKeyToAsn1(keys.privateKey);
    const privateKeyInfo = pki.wrapRsaPrivateKey(privateKey);
    const privateKeyPem = pki.privateKeyInfoToPem(privateKeyInfo);
    const certificate = pki
        .certificateToPem(cert)
        .replace("-----BEGIN CERTIFICATE-----", "")
        .replace("-----END CERTIFICATE-----", "")
        .replace(/\r?\n|\r/g, "")
        .trim();
    const privateKeyToReturn = privateKeyPem
        .replace("-----BEGIN PRIVATE KEY-----", "")
        .replace("-----END PRIVATE KEY-----", "")
        .replace(/\r?\n|\r/g, "")
        .trim();
    return { certificate, fingerprint, privateKey: privateKeyToReturn };
};
class KeyPair {
    /**
     * Generates a new KeyPair for HebeCE API.
     *
     * @async
     * @returns {Promise<{fingerprint: string, privateKey: string, certificate: string}>}
     */
    constructor() {
        return (async () => {
            const keypair = await generateKeyPair();
            // @ts-ignore
            return {
                fingerprint: keypair.fingerprint,
                privateKey: keypair.privateKey,
                certificate: keypair.certificate,
            };
        })();
    }
}
exports.default = KeyPair;
